{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport Logo from \"./app/imagens/logo.png\";\nvar fundo = {\n  uri: \"https://iphone11papers.com/wp-content/uploads/papers.co-sf42-sky-blue-clear-love-gradation-blur-41-iphone-wallpaper.jpg\"\n};\nimport Intro from \"./app/screens/Intro\";\nimport NoteScreen from \"./app/screens/NoteScreen\";\nimport NoteDetail from \"./app/components/NoteDetail\";\nimport NoteProvider from \"./app/contexts/NoteProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nexport default function App() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAppFirstTimeOpen = _useState4[0],\n      setIsAppFirstTimeOpen = _useState4[1];\n\n  var findUser = function _callee() {\n    var result;\n    return _regeneratorRuntime().async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime().awrap(AsyncStorage.getItem('user'));\n\n          case 2:\n            result = _context.sent;\n\n            if (!(result === null)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setIsAppFirstTimeOpen(true));\n\n          case 5:\n            setUser(JSON.parse(result));\n            setIsAppFirstTimeOpen(false);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    findUser();\n  }, []);\n\n  var renderNoteScreen = function renderNoteScreen(props) {\n    return _jsx(NoteScreen, _objectSpread(_objectSpread({}, props), {}, {\n      user: user\n    }));\n  };\n\n  if (isAppFirstTimeOpen) return _jsx(Intro, {\n    onFinish: findUser\n  });\n  return _jsx(NavigationContainer, {\n    children: _jsx(NoteProvider, {\n      children: _jsxs(Stack.Navigator, {\n        screenOptions: {\n          headerTitle: '',\n          headerTransparent: true\n        },\n        children: [_jsx(Stack.Screen, {\n          component: renderNoteScreen,\n          name: \"NoteScreen\"\n        }), _jsx(Stack.Screen, {\n          component: NoteDetail,\n          name: \"NoteDetail\"\n        })]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["AsyncStorage","React","useEffect","useState","createStackNavigator","NavigationContainer","Logo","fundo","uri","Intro","NoteScreen","NoteDetail","NoteProvider","Stack","App","user","setUser","isAppFirstTimeOpen","setIsAppFirstTimeOpen","findUser","getItem","result","JSON","parse","renderNoteScreen","props","headerTitle","headerTransparent","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"sources":["c:/Users/Master/app/App.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, ImageBackground,Image,} from 'react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\n\n//importando imagens\nimport Logo from './app/imagens/logo.png'; //Definir imagem e importar de /imagens/logo.png\nconst fundo = { uri: \"https://iphone11papers.com/wp-content/uploads/papers.co-sf42-sky-blue-clear-love-gradation-blur-41-iphone-wallpaper.jpg\" };\n\n// importando telas\nimport Intro from './app/screens/Intro'; // tela intro que pede o nome de usuário\nimport NoteScreen from './app/screens/NoteScreen'; // tela que exibe todas as notas\nimport NoteDetail from './app/components/NoteDetail'; //tela exibida ao abrir uma nota\nimport NoteProvider from './app/contexts/NoteProvider'; //tela que fornece a nota pequisada\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  const [user, setUser] = useState({});\n  const [isAppFirstTimeOpen, setIsAppFirstTimeOpen] = useState(false);\n  const findUser = async () => {\n    const result = await AsyncStorage.getItem('user');\n\n    if (result === null) return setIsAppFirstTimeOpen(true);\n\n    setUser(JSON.parse(result));\n    setIsAppFirstTimeOpen(false);\n  };\n\n  useEffect(() => {\n    findUser();\n  }, []);\n\n  const renderNoteScreen = props => <NoteScreen {...props} user={user} />;\n\n  if (isAppFirstTimeOpen) return <Intro onFinish={findUser} />;\n  return (\n    <NavigationContainer>\n      <NoteProvider>\n        <Stack.Navigator\n          screenOptions={{ headerTitle: '', headerTransparent: true }}\n        >\n          <Stack.Screen component={renderNoteScreen} name='NoteScreen' />\n          <Stack.Screen component={NoteDetail} name='NoteDetail' />\n        </Stack.Navigator>\n      </NoteProvider>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAGA,OAAOC,IAAP;AACA,IAAMC,KAAK,GAAG;EAAEC,GAAG,EAAE;AAAP,CAAd;AAGA,OAAOC,KAAP;AACA,OAAOC,UAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;;;AAEA,IAAMC,KAAK,GAAGT,oBAAoB,EAAlC;AAEA,eAAe,SAASU,GAAT,GAAe;EAC5B,gBAAwBX,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOY,IAAP;EAAA,IAAaC,OAAb;;EACA,iBAAoDb,QAAQ,CAAC,KAAD,CAA5D;EAAA;EAAA,IAAOc,kBAAP;EAAA,IAA2BC,qBAA3B;;EACA,IAAMC,QAAQ,GAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,mCACMnB,YAAY,CAACoB,OAAb,CAAqB,MAArB,CADN;;UAAA;YACTC,MADS;;YAAA,MAGXA,MAAM,KAAK,IAHA;cAAA;cAAA;YAAA;;YAAA,iCAGaH,qBAAqB,CAAC,IAAD,CAHlC;;UAAA;YAKfF,OAAO,CAACM,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAD,CAAP;YACAH,qBAAqB,CAAC,KAAD,CAArB;;UANe;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EASAhB,SAAS,CAAC,YAAM;IACdiB,QAAQ;EACT,CAFQ,EAEN,EAFM,CAAT;;EAIA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK;IAAA,OAAI,KAAC,UAAD,kCAAgBA,KAAhB;MAAuB,IAAI,EAAEV;IAA7B,GAAJ;EAAA,CAA9B;;EAEA,IAAIE,kBAAJ,EAAwB,OAAO,KAAC,KAAD;IAAO,QAAQ,EAAEE;EAAjB,EAAP;EACxB,OACE,KAAC,mBAAD;IAAA,UACE,KAAC,YAAD;MAAA,UACE,MAAC,KAAD,CAAO,SAAP;QACE,aAAa,EAAE;UAAEO,WAAW,EAAE,EAAf;UAAmBC,iBAAiB,EAAE;QAAtC,CADjB;QAAA,WAGE,KAAC,KAAD,CAAO,MAAP;UAAc,SAAS,EAAEH,gBAAzB;UAA2C,IAAI,EAAC;QAAhD,EAHF,EAIE,KAAC,KAAD,CAAO,MAAP;UAAc,SAAS,EAAEb,UAAzB;UAAqC,IAAI,EAAC;QAA1C,EAJF;MAAA;IADF;EADF,EADF;AAYD;AAED,IAAMiB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;EAC/BC,SAAS,EAAE;IACTC,IAAI,EAAE,CADG;IAETC,eAAe,EAAE,MAFR;IAGTC,UAAU,EAAE,QAHH;IAITC,cAAc,EAAE;EAJP;AADoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}